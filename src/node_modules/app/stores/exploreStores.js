import * as _ from 'lamb';
import {derived, writable} from 'svelte/store';
import {getId, mergeObj} from '@svizzle/utils';

import Datasets from 'app/data/datasets.json';
import {groupBySource} from 'app/utils/domain';
import {toggle} from 'app/utils/generic';

/* sources */

const makeSources = _.pipe([
	groupBySource,
	_.mapValuesWith(_.pipe([
		_.sortWith([getId]),
		datasets => ({
			activeDatasetIndex: 0,
			datasets,
			isExpanded: false,
			isSelected: false,
		})
	]))
]);

const defaultSources = makeSources(Datasets);

export const sources = writable(defaultSources);
export const resetSources = () => {
	sources.set(defaultSources);
};
export const selectSource = sourceName => {
	sources.set(_.setPathIn(defaultSources, `${sourceName}.isSelected`, true));
};
export const toggleSource = sourceName => {
	sources.update(_.updatePath(`${sourceName}.isExpanded`, toggle))
};
export const selectDataset = (sourceName, index) => {
	sources.update(_.updatePath(
		`${sourceName}`,
		mergeObj({
			isExpanded: false,
			activeDatasetIndex: index,
		}))
	)
}

/* navigator */

const makeNavigator = _.pipe([
	_.pairs,
	_.mapWith(([sourceName, {
		activeDatasetIndex,
		datasets,
		isExpanded,
		isSelected
	}]) => ({
		activeDataset: datasets[activeDatasetIndex],
		activeDatasetIndex,
		datasets,
		isExpanded,
		isSelected,
		sourceName,
	})),
]);

export const navigator = derived(sources, makeNavigator);
