import {mergeObj} from '@svizzle/utils';

import {
	_shape,
	enumsOf,
	numString,
	objectOf,
	string,
	unionOf,
} from 'app/elasticsearch/types/genericTypes';

// conditions

export const optionalKey = '__optional';
export const optional = mergeObj({[optionalKey]: true});

/* common */

export const sortOptions = objectOf({
	_key: optional(enumsOf(['asc', 'desc'], 'asc')),
	_count: optional(enumsOf(['asc', 'desc'], 'desc')),
});

/* dimensional types */

export const genericInterval = objectOf({
	...string,
	value: numString, // '1', '1.1', 'E+10'
	units: unionOf('ms', 's', 'm', 'h', 'd', 'w', 'M', 'q', 'y')
});

export const calendarInterval = objectOf({
	...string,
	value: numString,
	units: unionOf('m', 'h', 'd', 'w', 'M', 'w', 'q', 'y')
});

export const fixedInterval = objectOf({
	...string,
	value: numString,
	units: unionOf('ms', 's', 'm', 'h', 'd')
});

/* other */

export const scriptD = _shape('script');
export const script = scriptD();

export const existence = enumsOf(['undefined', '{}']); // FIXME TBD
