import * as _ from 'lamb';

import aggsIdByFieldType from 'app/elasticsearch/config/aggsIdByFieldType';
import {getESType} from 'app/elasticsearch/utils/aggFields';

const hasKeywordField = _.anyOf([
	_.is('ES_text_w_keyword'),
	_.is('ES_text_w_keyword[]'),
]);

const createKeywordFieldQuery = fieldName => ({field: `${fieldName}.keyword`});

function defaultAggregationFactory (fieldName, fieldInfo) {
	const fieldType = getESType(fieldInfo);
	if (hasKeywordField(fieldType)) {
		return createKeywordFieldQuery(fieldName);
	}
	return { field: fieldName };
}

const queryFactories = {
	composite: () => ({}),
	filter: () => ({}),
	filters: () => ({}),
	sampler: () => ({}),
	// eslint-disable-next-line no-unused-vars
	weighted_avg: () => ({})
}

export function buildAggregation (aggregation, fieldName, fieldInfo) {
	if (aggregation in queryFactories) {
		return queryFactories[aggregation](fieldName, fieldInfo);
	}

	return defaultAggregationFactory(fieldName, fieldInfo);
}

export function constructQuery (schema) {
	const aggs = {};
	for (let f in schema) {
		const fType = getESType(schema[f]);
		const typeAggs = aggsIdByFieldType[fType];
		for (let i in typeAggs) {
			const at = typeAggs[i];
			const atName = `${f}_${at}`;
			aggs[atName] = {
				[at]: buildAggregation(at, f, schema[f])
			};
		}
	}

	return {
		size: 0,
		aggs
	};
}
