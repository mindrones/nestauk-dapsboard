import {actions, assign} from 'xstate';

import DATASETS from 'app/data/datasets.json';
import {stringifyContextStores} from 'app/machines/utils';
import {getSearchURL, getDatasetIdOf} from 'app/utils/specs';

const {choose, log} = actions;

const selectDataset = (ctx, {project, source, version}) => {
	ctx.dataset.set({project, source, version});

	const datasetId = getDatasetIdOf({project, source, version});
	const dataset = DATASETS.find(ds => ds.id === datasetId);
	const queryURL = getSearchURL(dataset);
	ctx.queryURL.set(queryURL);

	return ctx;
}

const loggedEvents = [
	// 'xstate.init',
	// 'QUERY_UPDATED',
];

export const routeOptions = {
	actions: {
		conditionalLog: choose([
			{
				cond: 'logGuard',
				actions: [
					log(
						(context, event) => `---- context: ${stringifyContextStores(context)}\n\n---- event: ${JSON.stringify(event)}`,
						'conditionalLog'
					)
				]
			},
		]),
		selectDataset: assign(selectDataset),
	},
	guards: {
		logGuard: (context, event) => loggedEvents.includes(event.type)
	}
};
