import * as _ from 'lamb';
import {isKeyOf} from '@svizzle/utils';

import {
	bucketParentLabels,
	nestedBucketLabels
} from 'elasticsearch/config/aggsLabels';
import aggParamsDefaults from 'elasticsearch/config/aggParamsDefaults';
import aggParamsShapeByFieldtypeByAggId
	from 'elasticsearch/config/aggParamsShapeByFieldtypeByAggId';
import aggsIdByFieldType from 'elasticsearch/config/aggsIdByFieldType';
import {aggHasNoRequiredParamsWithoutDefault} from 'elasticsearch/types/aggs.utils';
import {buildAggregation} from 'elasticsearch/utils/aggQuery';
import {getSchemaOf} from 'app/utils/data';
import {getFieldTypeId, getDatasetIdOf} from 'app/utils/specs';

export const makeExploreQuery = ({fields, project, version}) => {
	let query = `project=${project}&version=${version}`;

	if (fields) {
		query = `${query}&fields=${fields.join(',')}`
	}

	return query;
}

export const makeExplorePath = ({fields, project, source, version}) =>
	`explore/${source}?${makeExploreQuery({fields, project, version})}`;

export const makeDepthByField = _.pipe([
	_.mapWith((x, i) => [x, i + 1]),
	_.fromPairs,
]);

export const makeAggHasNoUndefaultedRequiredParams = fieldType => aggId => {
	const aggParams = aggParamsShapeByFieldtypeByAggId[fieldType][aggId];

	return aggHasNoRequiredParamsWithoutDefault(aggParams);
}

export const makeSafeAgg = fieldTypeId => _.allOf([
	_.not(isKeyOf(bucketParentLabels)),
	_.not(isKeyOf(nestedBucketLabels)),
	makeAggHasNoUndefaultedRequiredParams(fieldTypeId),
]);

// assuming `fields` has just one field for now
export const selectionToAggsQuery = ({fields, project, source, version}) => {
	const datasetId = getDatasetIdOf({project, source, version});
	const schema = getSchemaOf({project, source, version});

	// use only the first field for now
	const [fieldName] = fields;
	const fieldSpec = schema[fieldName];
	const fieldTypeId = getFieldTypeId(fieldSpec);
	const aggIds = aggsIdByFieldType[fieldTypeId];
	const safeAggsIds = _.filter(aggIds, makeSafeAgg(fieldTypeId))
	const query = {
		size: 0,
		aggs: {
			..._.fromPairs(
				_.map(safeAggsIds, aggId => [
					`${datasetId}.${fieldName}.${aggId}`,
					{[aggId]: {
						...buildAggregation(aggId, fieldName, fieldSpec),
						...aggParamsDefaults[aggId]
					}}
				])
			)
		}
	};

	// console.log(JSON.stringify(query, null, 2))

	return query;
};
